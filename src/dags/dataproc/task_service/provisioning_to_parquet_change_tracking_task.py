from datetime import datetime, timedelta
from typing import List
# from airflow import DAG

from ttd.task_service.persistent_storage.persistent_storage_config import PersistentStorageConfig, PersistentStorageType
from ttd.task_service.task_service_dag import TaskServiceDagFactory, TaskServiceDagRegistry
from ttd.task_service.k8s_pod_resources import TaskServicePodResources
from ttd.slack.slack_groups import dataproc, AIFUN

hourly = [
    "ParquetSync_AutoOptimizationBatchAdGroupVector",
    "ParquetSync_AutoOptimizationTestAdvertisers",
    "ParquetSync_AcrProviderSegment_v2",
    "ParquetSync_AdGroupSecondarySettings",
    "ParquetSync_AdsTxtDomainClassDomains",
    "ParquetSync_TargetingDataNielsenMapping",
    "ParquetSync_AcrProviderBrandExposureSegments_v2",
    "ParquetSync_AcrProviderBrandSegments",
    "ParquetSync_AutoAudiencePredictorExcluderJobQueue",
    "ParquetSync_AutoAudiencePredictorExcluderJournal",
    "ParquetSync_AcrAudienceAcceleratorExclusion",
    "ParquetSync_IdSharingRule",
    "ParquetSync_IdSharingIdType",
    "ParquetSync_IdSharingRecipient",
    "ParquetSync_IdSharingRecipientPreference",
]

two_hourly = [
    "ParquetSync_AudienceTargetingThirdPartyData",
    "ParquetSync_AudienceTargetingAdvertiserData",
    "ParquetSync_OptimizationBatchAdGroup",
]

four_hourly = [
    "ParquetSync_AutoAdGroupBaseBidAdjustment",
    "ParquetSync_AdGroupPotentialSpendDailyRollup",
]

daily = [
    "ParquetSync_AutoOptimizationBatch",
    "ParquetSync_AcrProviderGrain",
    "ParquetSync_OmnichannelPathOptimizationSettings",
    "ParquetSync_TargetingDataUniques",
    "ParquetSync_TargetingDataUniquesByCountryV2",
    "ParquetSync_TargetingDataUniquesV2",
    "ParquetSync_ThirdPartyData",
    "ParquetSync_ThirdPartyDataBrand",
    "ParquetSync_ThirdPartyDataCategoryAssociation",
    "ParquetSync_ThirdPartyDataProvider",
    "ParquetSync_TrackingTag",
    "ParquetSync_TTDLanguage",
    "ParquetSync_TvToHouseholdReachMap",
    "ParquetSync_UniversalPixel",
    "ParquetSync_UniversalPixelTrackingTag",
    "ParquetSync_VideoMutedStateSites",
    "ParquetSync_VideoPlaybackType",
    "ParquetSync_VideoPlayerSize",
    "ParquetSync_VideoQuality",
    "ParquetSync_ViewabilitySettings",
    "ParquetSync_vw_BidStreamConversionCampaignSettings_Expanded",
    "ParquetSync_AdsTxtSellerType",
    "ParquetSync_Advertiser",
    "ParquetSync_AdvertiserBidList",
    "ParquetSync_AppStoreBundleId",
    "ParquetSync_Audience",
    "ParquetSync_AudienceBooster",
    "ParquetSync_AudienceComposition",
    "ParquetSync_AudienceExtensionSeedSettings",
    "ParquetSync_ActiveAdvertiserTargetingData",
    "ParquetSync_AdFormat",
    "ParquetSync_AdGroup",
    "ParquetSync_AdGroupCrossDeviceVendor",
    "ParquetSync_AdGroupAudienceRetargetingPixels",
    "ParquetSync_AdGroupAudienceRetargetingSettings",
    "ParquetSync_AdGroupAutoOptimizationSettings",
    "ParquetSync_AdGroupBidList",
    "ParquetSync_AdGroupCreative",
    "ParquetSync_AdGroupDisabledRecent",
    "ParquetSync_AdGroupKoaOptimizationSettings",
    "ParquetSync_AdGroupOptimizationVersion",
    "ParquetSync_InventoryChannel",
    "ParquetSync_AdGroupPerformanceModelValues",
    "ParquetSync_AudiencePredictorSeedId",
    "ParquetSync_Commitment",
    "ParquetSync_CommitmentPrivateContract",
    "ParquetSync_OmnichannelGroup",
    "ParquetSync_OmnichannelGroupCampaign",
    "ParquetSync_OS",
    "ParquetSync_OSFamily",
    "ParquetSync_Partner",
    "ParquetSync_PartnerGroup",
    "ParquetSync_PartnerBidList",
    "ParquetSync_PartnerSupplyVendorDiscrepancyAdjustment",
    "ParquetSync_Peer39Language",
    "ParquetSync_PlacementPositionRelativeToFold",
    "ParquetSync_PrivateContract",
    "ParquetSync_PrivateContractDeliveryProfile",
    "ParquetSync_PrivateContractGroup",
    "ParquetSync_PrivateContractGroupPrivateContract",
    "ParquetSync_PrivateContractPublisher",
    "ParquetSync_PrivateContractsAdvertisersAllowedToBuyNoGlobals",
    "ParquetSync_PrivateContractWinRate",
    "ParquetSync_Publisher",
    "ParquetSync_SupplyPublisher",
    "ParquetSync_RecommendationChannelDefinition",
    "ParquetSync_Region",
    "ParquetSync_RenderingContext",
    "ParquetSync_ROIGoalType",
    "ParquetSync_Schedule",
    "ParquetSync_ScheduleDeliveryExecution",
    "ParquetSync_ScheduleExecution",
    "ParquetSync_ScheduleExecutionStateHistory",
    "ParquetSync_SiteClassification",
    "ParquetSync_SSPEmailReport",
    "ParquetSync_StaticExpandedGeoElements",
    "ParquetSync_SupplyPlatformSPOExclusion",
    "ParquetSync_SupplyPlatformSPOModelv2",
    "ParquetSync_SupplyPlatformSPOPublisherMediaType",
    "ParquetSync_SupplyVendor",
    "ParquetSync_SupplyVendorBidding",
    "ParquetSync_SupplyVendorDeal",
    "ParquetSync_SupplyVendorPublisher",
    "ParquetSync_SupplyVendorPublisherDataRights",
    "ParquetSync_SupplyVendorPublisherIdToPublisherId",
    "ParquetSync_SupplyVendorPublisherSeller",
    "ParquetSync_SupplyVendorPublisherSellerV2",
    "ParquetSync_TargetDemographic",
    "ParquetSync_TargetDemographicThirdPartyData",
    "ParquetSync_TargetingDataCountryV2",
    "ParquetSync_TargetingDataExport",
    "ParquetSync_TargetingDataGroup",
    "ParquetSync_AutoOptimizationBatchAdGroupVectorV2",
    "ParquetSync_AutoOptimizationTestV2AdGroups",
    "ParquetSync_AutoOptimizationVector",
    "ParquetSync_AutoOptThirdPartyDataInterestCategoryAssociation",
    "ParquetSync_AutoOptV3TestAdGroups",
    "ParquetSync_BidList",
    "ParquetSync_BidListsForAdGroup",
    "ParquetSync_BlockedSellers",
    "ParquetSync_Browser",
    "ParquetSync_Campaign",
    "ParquetSync_CampaignBidList",
    "ParquetSync_CampaignConversionReportingColumn",
    "ParquetSync_CampaignConversionReportingColumnHourly",
    "ParquetSync_CampaignFlight",
    "ParquetSync_CampaignPacingSettings",
    "ParquetSync_CampaignROIGoal",
    "ParquetSync_CampaignSeed",
    "ParquetSync_Carrier",
    "ParquetSync_Category",
    "ParquetSync_City",
    "ParquetSync_ContinentalRegion",
    "ParquetSync_ConversionLiftExperimentMetadata",
    "ParquetSync_CookielessFudgeFactorBidList",
    "ParquetSync_Country",
    "ParquetSync_CrossDeviceAttributionModels",
    "ParquetSync_CrossDeviceAttributionModelVendor",
    "ParquetSync_CrossDeviceVendor",
    "ParquetSync_CurrencyCode",
    "ParquetSync_CurrencyExchangeRate",
    "ParquetSync_DataCenter",
    "ParquetSync_DataRateCard",
    "ParquetSync_DealRequestData",
    "ParquetSync_DeletionRequest",
    "ParquetSync_DeliveryProfile",
    "ParquetSync_ThirdPartyDataPermission",
    "ParquetSync_AdvertiserRetailBrandSetting",
    "ParquetSync_DeviceModel",
    "ParquetSync_DeviceType",
    "ParquetSync_DomainFragment",
    "ParquetSync_DoubleVerifyVideoViewabilityCategory",
    "ParquetSync_DoubleVerifyViewabilityCategory",
    "ParquetSync_ExpandedThirdPartyDataRate",
    "ParquetSync_ExperimentMetadata",
    "ParquetSync_FactualProximityDesign",
    "ParquetSync_FactualProximityDesignTargetingCode",
    "ParquetSync_FactualProximityTargetingCode",
    "ParquetSync_GeoElementMappings",
    "ParquetSync_GeoSegment",
    "ParquetSync_GeoSegmentElement",
    "ParquetSync_HHSolutionBlockedAdvertisers",
    "ParquetSync_InternetConnectionType",
    "ParquetSync_Language",
    "ParquetSync_LogicalColumnPerExecution",
    "ParquetSync_Marketplace",
    "ParquetSync_MarketplaceAdGroupBidList",
    "ParquetSync_MarketplaceProperty",
    "ParquetSync_MaxMindLocation",
    "ParquetSync_MediaType",
    "ParquetSync_MobileApplicationIdNameMap",
    "ParquetSync_MyReportTableGroupWhereFilter",
    "ParquetSync_OfflineDataProvider",
    "ParquetSync_OperatingSystem",
    "ParquetSync_PixelsWithMissingLALResults",
    "ParquetSync_NewDevicesIndicatorSettings",
    "ParquetSync_NewCarrierSubscribersSettings",
    "ParquetSync_ExportVAandKoaSDAdGroups",
    "ParquetSync_CuratedMarketplaceDefinitions",
    "ParquetSync_DimensionDescriptor",
    "ParquetSync_CreativeLandingPage",
    "ParquetSync_ValueAlgoActivityLog",
    "ParquetSync_Property",
    "ParquetSync_PropertyMapping",
    "ParquetSync_AddedValueMeasurementBrandTargetingBrandMapping",
    "ParquetSync_AdvertiserAddedValueMeasurementBrandPermission",
    "ParquetSync_ThirdPartyDataBrandAddedValueMeasurement",
    "ParquetSync_NonHybridRateBlockList",
    "ParquetSync_CollectedCrossDeviceGraph",
    "ParquetSync_Metro",
    "ParquetSync_GeoElement",
    "ParquetSync_Zip",
    "ParquetSync_FlattenedStandardLocation",
    "ParquetSync_AdGroupDecisionPower",
    "ParquetSync_AdvertiserAverageMediaCostByChannel",
    "ParquetSync_CampaignCreatedFromSource",
    "ParquetSync_ContentRating",
    "ParquetSync_Genre",
    "ParquetSync_BluelistPrioritizationBidList",
    "ParquetSync_UniversalCategoryTaxonomy",
    "ParquetSync_InventoryDataRight_ActiveSupplyVendorContracts",
    "ParquetSync_InventoryDataRight_ActivePublisherContracts",
    "ParquetSync_InventoryDataRight_GeoRestrictions",
    "ParquetSync_InventoryDataRight_PiiRestrictions",
    "ParquetSync_DigitalOutOfHomeVenueType",
    "ParquetSync_PartnerFeature",
    "ParquetSync_RecipientGdprVendorId",
    "ParquetSync_ProjectedSpendDataByAdGroup",
    "ParquetSync_JournalismNewsSiteList",
    "ParquetSync_AllAdGroup",
    "ParquetSync_AudienceTestAdGroup",
    "ParquetSync_CampaignBudgetingStatus",
    "ParquetSync_DistributedAlgosAdvertiserRestrictionStatus",
    "ParquetSync_CampaignPerformanceModel",
    "ParquetSync_ThirdPartyDataCompositeSegment",
    "ParquetSync_Creative",
]

large_daily = [
    "ParquetSync_AudienceTargetingData",
    "ParquetSync_BidDimension",
    "ParquetSync_BidLine",
    "ParquetSync_PmpAdGroupTargetedPrivateContract",
    "ParquetSync_DataRate2",
]

number_of_daily_tasks = 5
daily_chunks = [daily[i::number_of_daily_tasks] for i in range(number_of_daily_tasks)]


def get_task_data(names: List[str]) -> str:
    return ','.join(names)


registry = TaskServiceDagRegistry(globals())
registry.register_dag(
    TaskServiceDagFactory(
        task_name="ProvisioningToParquetChangeTrackingTask",
        scrum_team=dataproc,
        task_config_name="ProvisioningToParquetChangeTrackingTaskConfig",
        start_date=datetime(2023, 3, 24),
        job_schedule_interval="30 * * * *",
        task_name_suffix="HOURLY",
        task_data=get_task_data(hourly),
        run_only_latest=True,
        task_execution_timeout=timedelta(minutes=30),
        resources=TaskServicePodResources.custom(
            request_cpu="0.5",
            request_memory="1Gi",
            request_ephemeral_storage="2Gi",
            limit_memory="1.5Gi",
            limit_ephemeral_storage="4Gi",
        ),
        enable_slack_alert=False,
        teams_allowed_to_access=[AIFUN.team.jira_team]
    )
)

registry.register_dag(
    TaskServiceDagFactory(
        task_name="ProvisioningToParquetChangeTrackingTask",
        scrum_team=dataproc,
        task_config_name="ProvisioningToParquetChangeTrackingTaskConfig",
        start_date=datetime(2023, 3, 24),
        job_schedule_interval="30 */2 * * *",
        task_name_suffix="TWO_HOURLY",
        task_data=get_task_data(two_hourly),
        run_only_latest=True,
        resources=TaskServicePodResources.custom(
            request_cpu="1.75",
            request_memory="2.5Gi",
            request_ephemeral_storage="5Gi",
            limit_memory="3Gi",
            limit_ephemeral_storage="7Gi",
        ),
        enable_slack_alert=False,
        teams_allowed_to_access=[AIFUN.team.jira_team]
    )
)

registry.register_dag(
    TaskServiceDagFactory(
        task_name="ProvisioningToParquetChangeTrackingTask",
        scrum_team=dataproc,
        task_config_name="ProvisioningToParquetChangeTrackingTaskConfig",
        start_date=datetime(2023, 3, 24),
        job_schedule_interval="30 */4 * * *",
        task_name_suffix="FOUR_HOURLY",
        task_data=get_task_data(four_hourly),
        run_only_latest=True,
        resources=TaskServicePodResources.custom(
            request_cpu="1",
            request_memory="1Gi",
            request_ephemeral_storage="2Gi",
            limit_memory="1.5Gi",
            limit_ephemeral_storage="4Gi",
        ),
        enable_slack_alert=False,
        teams_allowed_to_access=[AIFUN.team.jira_team]
    )
)

for chunk_count, export_names in enumerate(daily_chunks, start=1):
    registry.register_dag(
        TaskServiceDagFactory(
            task_name="ProvisioningToParquetChangeTrackingTask",
            scrum_team=dataproc,
            task_config_name="ProvisioningToParquetChangeTrackingTaskConfig",
            start_date=datetime(2023, 3, 24),
            job_schedule_interval="0 2 * * *",
            task_name_suffix=f"{chunk_count}_DAILY",
            task_data=get_task_data(export_names),
            configuration_overrides={"ProvisioningToParquetChangeTracking.MaxParallelThreads": "5"},
            run_only_latest=True,
            task_execution_timeout=timedelta(hours=3),
            retry_delay=timedelta(minutes=30),
            resources=TaskServicePodResources.custom(
                request_cpu="5",
                request_memory="4Gi",
                request_ephemeral_storage="15Gi",
                limit_memory="7Gi",
                limit_ephemeral_storage="25Gi",
            ),
            enable_slack_alert=False,
            teams_allowed_to_access=[AIFUN.team.jira_team],
        )
    )

for export_name in large_daily:
    suffix = export_name.split("_", 1)[1]

    registry.register_dag(
        TaskServiceDagFactory(
            task_name="ProvisioningToParquetChangeTrackingTask",
            scrum_team=dataproc,
            task_config_name="ProvisioningToParquetChangeTrackingTaskConfig",
            start_date=datetime(2024, 6, 19),
            job_schedule_interval="0 1 * * *",
            task_name_suffix=f'{suffix}_DAILY',
            task_data=export_name,
            run_only_latest=True,
            task_execution_timeout=timedelta(hours=4),
            retry_delay=timedelta(minutes=30),
            resources=TaskServicePodResources.custom(
                request_cpu="2",
                request_memory="30Gi",
                request_ephemeral_storage="1Gi",
                limit_memory="35Gi",
                limit_ephemeral_storage="2Gi",
            ),
            persistent_storage_config=PersistentStorageConfig(PersistentStorageType.ONE_POD_TEMP, "75Gi", mount_path="/tmp"),
            enable_slack_alert=False,
            teams_allowed_to_access=[AIFUN.team.jira_team]
        )
    )

registry.register_dag(
    TaskServiceDagFactory(
        task_name="ProvisioningToParquetChangeTrackingTask",
        scrum_team=dataproc,
        task_config_name="ProvisioningToParquetChangeTrackingTaskConfig",
        start_date=datetime(2024, 6, 19),
        job_schedule_interval="0 3 * * *",
        task_name_suffix="TargetingData_DAILY",
        task_data="ParquetSync_TargetingData",
        run_only_latest=True,
        task_execution_timeout=timedelta(hours=3),
        retry_delay=timedelta(minutes=30),
        retries=4,
        resources=TaskServicePodResources.custom(
            request_cpu="2",
            request_memory="30Gi",
            request_ephemeral_storage="1Gi",
            limit_memory="35Gi",
            limit_ephemeral_storage="2Gi",
        ),
        persistent_storage_config=PersistentStorageConfig(PersistentStorageType.ONE_POD_TEMP, "150Gi", mount_path="/tmp"),
        enable_slack_alert=False,
        teams_allowed_to_access=[AIFUN.team.jira_team]
    )
)
