# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dags.forecast.validation.history_service.core.forecasting_hist_pb2 as forecasting__hist__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},' + ' but the generated code in forecasting_hist_pb2_grpc.py depends on' +
        f' grpcio>={GRPC_GENERATED_VERSION}.' + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}' +
        f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ForecastingHistoryStub(object):
    """History service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreForecast = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/StoreForecast',
            request_serializer=forecasting__hist__pb2.ForecastData.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ForecastReply.FromString,
            _registered_method=True
        )
        self.RetrieveForecast = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/RetrieveForecast',
            request_serializer=forecasting__hist__pb2.ForecastRequest.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ForecastReply.FromString,
            _registered_method=True
        )
        self.RetrieveForecastsForAdGroup = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/RetrieveForecastsForAdGroup',
            request_serializer=forecasting__hist__pb2.AdGroup.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ForecastList.FromString,
            _registered_method=True
        )
        self.RetrieveForecastsWithAudience = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/RetrieveForecastsWithAudience',
            request_serializer=forecasting__hist__pb2.DBRetrievalRequestWithTimeFrame.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ForecastConfigurationList.FromString,
            _registered_method=True
        )
        self.ExecuteSanityCheckTask = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/ExecuteSanityCheckTask',
            request_serializer=forecasting__hist__pb2.SanityCheckConfiguration.SerializeToString,
            response_deserializer=forecasting__hist__pb2.SanityCheckTaskResult.FromString,
            _registered_method=True
        )
        self.AddForecastingExperiment = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/AddForecastingExperiment',
            request_serializer=forecasting__hist__pb2.ExperimentDefinition.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ExperimentDefinition.FromString,
            _registered_method=True
        )
        self.RetrieveAllActiveExperiments = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/RetrieveAllActiveExperiments',
            request_serializer=forecasting__hist__pb2.ReturnAndStoreOptions.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ExperimentList.FromString,
            _registered_method=True
        )
        self.ActivateExperiment = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/ActivateExperiment',
            request_serializer=forecasting__hist__pb2.ExperimentName.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ExperimentDefinition.FromString,
            _registered_method=True
        )
        self.DeactivateExperiment = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/DeactivateExperiment',
            request_serializer=forecasting__hist__pb2.ExperimentName.SerializeToString,
            response_deserializer=forecasting__hist__pb2.ExperimentDefinition.FromString,
            _registered_method=True
        )
        self.RetrieveProductionDeployments = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/RetrieveProductionDeployments',
            request_serializer=forecasting__hist__pb2.ReturnAndStoreOptions.SerializeToString,
            response_deserializer=forecasting__hist__pb2.DeploymentList.FromString,
            _registered_method=True
        )
        self.AddProductionDeployments = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/AddProductionDeployments',
            request_serializer=forecasting__hist__pb2.DeploymentList.SerializeToString,
            response_deserializer=forecasting__hist__pb2.DeploymentList.FromString,
            _registered_method=True
        )
        self.RemoveProductionDeployments = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/RemoveProductionDeployments',
            request_serializer=forecasting__hist__pb2.DeploymentList.SerializeToString,
            response_deserializer=forecasting__hist__pb2.DeploymentList.FromString,
            _registered_method=True
        )
        self.SetDeploymentRamServiceWebAddress = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/SetDeploymentRamServiceWebAddress',
            request_serializer=forecasting__hist__pb2.DeploymentNameWithRamAddress.SerializeToString,
            response_deserializer=forecasting__hist__pb2.DeploymentNameWithRamAddress.FromString,
            _registered_method=True
        )
        self.RetrieveActiveDeploymentsWithRamWebAddresses = channel.unary_unary(
            '/ttd.forecast_hist.ForecastingHistory/RetrieveActiveDeploymentsWithRamWebAddresses',
            request_serializer=forecasting__hist__pb2.ReturnAndStoreOptions.SerializeToString,
            response_deserializer=forecasting__hist__pb2.DeploymentNameWithRamAddressList.FromString,
            _registered_method=True
        )


class ForecastingHistoryServicer(object):
    """History service definition
    """

    def StoreForecast(self, request, context):
        """Stores a forecast
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveForecast(self, request, context):
        """Returns a forecast
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveForecastsForAdGroup(self, request, context):
        """Gets all forecasts for a given ad group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveForecastsWithAudience(self, request, context):
        """Returns all forecasts with a live audience attached to them
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteSanityCheckTask(self, request, context):
        """Calling the execute sanity check task to schedule a check or run a manual one
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddForecastingExperiment(self, request, context):
        """Adds a new Experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveAllActiveExperiments(self, request, context):
        """Retrieves all active experiments and stores them in S3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActivateExperiment(self, request, context):
        """Activate Experiment (start sending load to all control - test environments)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeactivateExperiment(self, request, context):
        """Deactivate Experiment (stop sending load to the experiment's control - test environments)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveProductionDeployments(self, request, context):
        """Retrieves all production deployments and stores them in S3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProductionDeployments(self, request, context):
        """Add new production deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveProductionDeployments(self, request, context):
        """Remove production deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDeploymentRamServiceWebAddress(self, request, context):
        """Set deployment ram web address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveActiveDeploymentsWithRamWebAddresses(self, request, context):
        """Retrieve all in use deployments with ram web address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ForecastingHistoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'StoreForecast':
        grpc.unary_unary_rpc_method_handler(
            servicer.StoreForecast,
            request_deserializer=forecasting__hist__pb2.ForecastData.FromString,
            response_serializer=forecasting__hist__pb2.ForecastReply.SerializeToString,
        ),
        'RetrieveForecast':
        grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveForecast,
            request_deserializer=forecasting__hist__pb2.ForecastRequest.FromString,
            response_serializer=forecasting__hist__pb2.ForecastReply.SerializeToString,
        ),
        'RetrieveForecastsForAdGroup':
        grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveForecastsForAdGroup,
            request_deserializer=forecasting__hist__pb2.AdGroup.FromString,
            response_serializer=forecasting__hist__pb2.ForecastList.SerializeToString,
        ),
        'RetrieveForecastsWithAudience':
        grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveForecastsWithAudience,
            request_deserializer=forecasting__hist__pb2.DBRetrievalRequestWithTimeFrame.FromString,
            response_serializer=forecasting__hist__pb2.ForecastConfigurationList.SerializeToString,
        ),
        'ExecuteSanityCheckTask':
        grpc.unary_unary_rpc_method_handler(
            servicer.ExecuteSanityCheckTask,
            request_deserializer=forecasting__hist__pb2.SanityCheckConfiguration.FromString,
            response_serializer=forecasting__hist__pb2.SanityCheckTaskResult.SerializeToString,
        ),
        'AddForecastingExperiment':
        grpc.unary_unary_rpc_method_handler(
            servicer.AddForecastingExperiment,
            request_deserializer=forecasting__hist__pb2.ExperimentDefinition.FromString,
            response_serializer=forecasting__hist__pb2.ExperimentDefinition.SerializeToString,
        ),
        'RetrieveAllActiveExperiments':
        grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveAllActiveExperiments,
            request_deserializer=forecasting__hist__pb2.ReturnAndStoreOptions.FromString,
            response_serializer=forecasting__hist__pb2.ExperimentList.SerializeToString,
        ),
        'ActivateExperiment':
        grpc.unary_unary_rpc_method_handler(
            servicer.ActivateExperiment,
            request_deserializer=forecasting__hist__pb2.ExperimentName.FromString,
            response_serializer=forecasting__hist__pb2.ExperimentDefinition.SerializeToString,
        ),
        'DeactivateExperiment':
        grpc.unary_unary_rpc_method_handler(
            servicer.DeactivateExperiment,
            request_deserializer=forecasting__hist__pb2.ExperimentName.FromString,
            response_serializer=forecasting__hist__pb2.ExperimentDefinition.SerializeToString,
        ),
        'RetrieveProductionDeployments':
        grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveProductionDeployments,
            request_deserializer=forecasting__hist__pb2.ReturnAndStoreOptions.FromString,
            response_serializer=forecasting__hist__pb2.DeploymentList.SerializeToString,
        ),
        'AddProductionDeployments':
        grpc.unary_unary_rpc_method_handler(
            servicer.AddProductionDeployments,
            request_deserializer=forecasting__hist__pb2.DeploymentList.FromString,
            response_serializer=forecasting__hist__pb2.DeploymentList.SerializeToString,
        ),
        'RemoveProductionDeployments':
        grpc.unary_unary_rpc_method_handler(
            servicer.RemoveProductionDeployments,
            request_deserializer=forecasting__hist__pb2.DeploymentList.FromString,
            response_serializer=forecasting__hist__pb2.DeploymentList.SerializeToString,
        ),
        'SetDeploymentRamServiceWebAddress':
        grpc.unary_unary_rpc_method_handler(
            servicer.SetDeploymentRamServiceWebAddress,
            request_deserializer=forecasting__hist__pb2.DeploymentNameWithRamAddress.FromString,
            response_serializer=forecasting__hist__pb2.DeploymentNameWithRamAddress.SerializeToString,
        ),
        'RetrieveActiveDeploymentsWithRamWebAddresses':
        grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveActiveDeploymentsWithRamWebAddresses,
            request_deserializer=forecasting__hist__pb2.ReturnAndStoreOptions.FromString,
            response_serializer=forecasting__hist__pb2.DeploymentNameWithRamAddressList.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler('ttd.forecast_hist.ForecastingHistory', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))
    server.add_registered_method_handlers('ttd.forecast_hist.ForecastingHistory', rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class ForecastingHistory(object):
    """History service definition
    """

    @staticmethod
    def StoreForecast(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/StoreForecast',
            forecasting__hist__pb2.ForecastData.SerializeToString,
            forecasting__hist__pb2.ForecastReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def RetrieveForecast(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/RetrieveForecast',
            forecasting__hist__pb2.ForecastRequest.SerializeToString,
            forecasting__hist__pb2.ForecastReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def RetrieveForecastsForAdGroup(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/RetrieveForecastsForAdGroup',
            forecasting__hist__pb2.AdGroup.SerializeToString,
            forecasting__hist__pb2.ForecastList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def RetrieveForecastsWithAudience(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/RetrieveForecastsWithAudience',
            forecasting__hist__pb2.DBRetrievalRequestWithTimeFrame.SerializeToString,
            forecasting__hist__pb2.ForecastConfigurationList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def ExecuteSanityCheckTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/ExecuteSanityCheckTask',
            forecasting__hist__pb2.SanityCheckConfiguration.SerializeToString,
            forecasting__hist__pb2.SanityCheckTaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def AddForecastingExperiment(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/AddForecastingExperiment',
            forecasting__hist__pb2.ExperimentDefinition.SerializeToString,
            forecasting__hist__pb2.ExperimentDefinition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def RetrieveAllActiveExperiments(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/RetrieveAllActiveExperiments',
            forecasting__hist__pb2.ReturnAndStoreOptions.SerializeToString,
            forecasting__hist__pb2.ExperimentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def ActivateExperiment(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/ActivateExperiment',
            forecasting__hist__pb2.ExperimentName.SerializeToString,
            forecasting__hist__pb2.ExperimentDefinition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def DeactivateExperiment(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/DeactivateExperiment',
            forecasting__hist__pb2.ExperimentName.SerializeToString,
            forecasting__hist__pb2.ExperimentDefinition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def RetrieveProductionDeployments(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/RetrieveProductionDeployments',
            forecasting__hist__pb2.ReturnAndStoreOptions.SerializeToString,
            forecasting__hist__pb2.DeploymentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def AddProductionDeployments(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/AddProductionDeployments',
            forecasting__hist__pb2.DeploymentList.SerializeToString,
            forecasting__hist__pb2.DeploymentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def RemoveProductionDeployments(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/RemoveProductionDeployments',
            forecasting__hist__pb2.DeploymentList.SerializeToString,
            forecasting__hist__pb2.DeploymentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def SetDeploymentRamServiceWebAddress(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/SetDeploymentRamServiceWebAddress',
            forecasting__hist__pb2.DeploymentNameWithRamAddress.SerializeToString,
            forecasting__hist__pb2.DeploymentNameWithRamAddress.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )

    @staticmethod
    def RetrieveActiveDeploymentsWithRamWebAddresses(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ttd.forecast_hist.ForecastingHistory/RetrieveActiveDeploymentsWithRamWebAddresses',
            forecasting__hist__pb2.ReturnAndStoreOptions.SerializeToString,
            forecasting__hist__pb2.DeploymentNameWithRamAddressList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True
        )
