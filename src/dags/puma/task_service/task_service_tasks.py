from datetime import datetime, timedelta
# from airflow import DAG
from ttd.task_service.task_service_dag import TaskServiceDagFactory, TaskServiceDagRegistry
from ttd.task_service.k8s_pod_resources import TaskServicePodResources
from ttd.slack.slack_groups import puma

registry = TaskServiceDagRegistry(globals())
registry.register_dag(
    TaskServiceDagFactory(
        task_name="UserManagementEmailReportTask",
        scrum_team=puma,
        task_config_name="UserManagementEmailReportConfig",
        task_name_suffix="daily",
        start_date=datetime.now() - timedelta(hours=3),
        job_schedule_interval="30 * * * *",
        resources=TaskServicePodResources.medium()
    )
)
registry.register_dag(
    TaskServiceDagFactory(
        task_name="UpdateAdminUserGroupAuthTask",
        scrum_team=puma,
        task_config_name="UpdateAdminUserGroupAuthConfig",
        task_name_suffix="hourly",
        start_date=datetime.now() - timedelta(hours=3),
        job_schedule_interval="6 * * * *",
        resources=TaskServicePodResources.medium(),
        configuration_overrides={"UpdateAdminUserGroupAuth.TransactionsEnabled": "true"}
    ),
)
registry.register_dag(
    TaskServiceDagFactory(
        task_name="AutoGeneratedUserGroupsCleanupTask",
        scrum_team=puma,
        task_config_name="AutoGeneratedUserGroupsCleanupConfig",
        task_name_suffix="daily",
        start_date=datetime.now() - timedelta(hours=3),
        job_schedule_interval="0 22 * * *",  # Every day at 10pm UTC
        resources=TaskServicePodResources.medium(),
        configuration_overrides={
            "AutoGeneratedUserGroupsCleanup.TransactionsEnabled": "true",
            "AutoGeneratedUserGroupsCleanup.DebugModeEnabled": "true"
        }
    )
)
