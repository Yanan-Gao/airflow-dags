# auto-generated
# This file is generated by AirflowGenerator of TTD.Tools.RtiPipeBuilderGenerator tool
from dags.dprpts.agiles.pipe_builder.tasks_dag_builder import TaskBuilder, FlowDagBuilder
from dags.dprpts.agiles.pipe_builder.consistency_dag_builder import ConsistencyTaskBuilder, ConsistencyDagBuilder
from ttd.eldorado.base import TtdDag
from ttd.task_service.vertica_clusters import (
    get_variants_for_group,
    TaskVariantGroup,
)


# running aggregation + export on ETL clusters, import - on UI cluster
def build_flow_dag(dag: TtdDag, task_builder: TaskBuilder) -> None:
    dag >> task_builder.create_aggregation_task(
        phase_origin_id="RtiPipeReportAggregation",
        depends_on="RtiPipePlatformReportCopyReady",
    )


def build_consistency_dag(dag: TtdDag, task_builder: ConsistencyTaskBuilder) -> None:
    dag >> task_builder.create_consistency_check(
        task_config_name="TruthMetricForecastValidationTruthMetricsReportAggregationCheckConfig",
        task_name_suffix="forecast-validation-truth-metrics-true-up",
    )


consistency_dag = ConsistencyDagBuilder(flow_name='truth-metric').build(lambda dag, task_builder: build_consistency_dag(dag, task_builder))

globals()[consistency_dag.airflow_dag.dag_id] = consistency_dag.airflow_dag

for aggregation_vertica_cluster in (get_variants_for_group(TaskVariantGroup.VerticaAws)):
    flow_dag = FlowDagBuilder(
        flow_name='truth-metric',
        batch_type_id=16,
        vertica_cluster=aggregation_vertica_cluster,
        phase_origin_types=["TrueUp", "DataCorrection"],
    ).build(lambda dag, task_builder: build_flow_dag(dag, task_builder))

    globals()[flow_dag.airflow_dag.dag_id] = flow_dag.airflow_dag
